                           __________________

                            LAB 04 QUESTIONS
                           __________________


- Name: Cyrus Chen
- NetID: chen3736

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete Lab01.


PROBLEM 1 `parent_listen.c'
===========================

A
~

    Child wrote 17 bytes
    Parent read 17 bytes
    Child said: 'Send $$$ please!'



B
~

    The pipe function creats a communication buffer that used between  processes that have a common ancestor. It is known as the oldest and most commonly uset Interprocess Communication(IPC).
 

C
~
  
  
  read() :
  parameter1 : the target file
  parameter2 : starting point of the buffer
  parameter3 : maximum reading bytes
  return: success = number of bytes read
          error   = -1
  
  write() :
  parameter1 : target file
  parameter2 : writing source
  parameter3 : maximum writing bytes
  return: success = number of bytes written
          error   = -1

D
~

    #include <stdlib.h>
    #include <stdio.h>
    #include <unistd.h>
    #include <sys/wait.h>
    #include <errno.h>
    #include <string.h>

    #define PREAD 0                 // index of read end of pipe
    #define PWRITE 1                // index of write end of pipe
    #define BUFSIZE 1024

    int main(int argc, char *argv[]) {

      int par_child_pipe[2];
      int pipe_result = pipe(par_child_pipe);
      if(pipe_result != 0) {
        perror("Failed to create pipe");
        exit(1);
      }

      pid_t child_pid = fork();
      if(child_pid <0){
        perror("Failed to fork");
        exit(1);
      }

      // CHILD CODE
      if(child_pid == 0){
        char *msg = "Send $$$ please!";
        int msg_len = strlen(msg)+1;
        int bytes_written = write(par_child_pipe[PWRITE], msg, msg_len);
        printf("Child wrote %d bytes\n",bytes_written);
        fflush(stdout);

        close(par_child_pipe[PWRITE]);
        close(par_child_pipe[PREAD]);
        exit(0);
      }

      // PARENT CODE
      wait(NULL);

      char buffer[BUFSIZE];
      // printf("Child %d started\n",child_pid);
      int bytes_read = read(par_child_pipe[PREAD], buffer, BUFSIZE);



      close(par_child_pipe[PWRITE]);
      close(par_child_pipe[PREAD]);

      printf("Parent read %d bytes\n",bytes_read);
      printf("Child said: '%s'\n",buffer);

      // wait(NULL);

      return 0;
    }


PROBLEM 2 `capture_stdout.c'
============================

A
~

Process 82110 Piping
82110 Read from the my_pipe
82110 Read: '82110 In the pipe, five by five'


B
~

  The calls `dup()' and `dup2()' are used in this program to manipulate
  file descriptors. Explain the effects of the lines below.
  ,----
  | int stdout_bak = dup(STDOUT_FILENO);
  | dup2(my_pipe[PWRITE], STDOUT_FILENO);
  | ...
  | dup2(stdout_bak, STDOUT_FILENO);
  `----
  The first line creates a copy of stdout.
  The second line redirect stdout to the pipe.
  The third line just resotre the standard out using the copy made in line 1.
  
  


C
~

Because the standard out has been redirected to pipe not the terminal, so the output never reach to the terminal but to the pipe.


D
~

	#include <unistd.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <sys/wait.h>
	#include <errno.h>
	#include <string.h>

	#define PREAD 0                            // index of read end of pipe
	#define PWRITE 1                           // index of write end of pipe

	int main(){
	  setvbuf(stdout, NULL, _IONBF, 0);        // Turn off I/O buffering

	  printf("Process %d Piping\n",getpid());
	  int my_pipe[2];
	  pipe(my_pipe);

	  int stdout_bak = dup(STDOUT_FILENO);     // Duplicate stdout so it can be restored later
	  dup2(my_pipe[PWRITE], STDOUT_FILENO);    // Redirect stdout to pipe

	  pid_t child_pid = fork();
	  if(child_pid <0){
	    perror("Failed to fork");
	    exit(1);
	  }
	  wait(NULL);

	  if(child_pid == 0){
	    printf("%d In the pipe, five by five",   // Should not show up on the screen
		     getpid());           
	    close(my_pipe[PWRITE]);                  // Close the write end of the pipe 
	    exit(0);
	  }

	  dup2(stdout_bak, STDOUT_FILENO);         // Restore stdout: redirect to backed up fd

	  printf("%d Read from the my_pipe\n",getpid());
	  char buf[2048];
	  int bytes_read = read(my_pipe[PREAD], buf, 2048);

	  buf[bytes_read] = '\0';                  // Not null-terminated by default, append '\0'
	  close(my_pipe[PREAD]);                   // Close read end
	  printf("%d Read: '%s'\n",getpid(),buf);  // Show earlier output
	  
	  return 0;
	}
