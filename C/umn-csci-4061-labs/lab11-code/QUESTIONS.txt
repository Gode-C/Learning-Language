                           __________________

                            LAB 11 QUESTIONS
                           __________________


- Name: Cyrus Chen
- NetID: chen3736

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete Lab01.


PROBLEM 1: Condition Variables
==============================

  Examine the three files
  - `odds_evens_busy.c'
  - `odds_evens_busy_nested_if.c'
  - `odds_evens_condvar.c'
  Each of these was discussed in class and in a follow-up Piazza
  post. Each implements a slight variation on the odd/even worker
  problem discussed in class.

  The provided Makefile allows one to run part of the experiment
  discussed on the Piazza post by entering
  ,----
  | make experiment
  `----

  Describe the 3 different techniques used by each of these
  implementations and the timing differences that you get in the
  experiment results. Keep in mind that "work" is simulated by short
  sleeps by threads so the real/wall timing has little meaning while the
  user/sys times have more meaning.


YOUR ANSWERS HERE:
------------------

    busy: using a busy wait loop to check for evenness, lock the mutex
        each time when checking, putting in a lot of effort.
    nested_if: bust wait but not locking the mutex when checking for
        evenness, save some lock&unlock. However, the nested-ifs is causing more
        time for the program to run.
    condvar: using a condition variable to notify threads of change to
        global varible, save a lot of work.

        condition varibale method is the best to use here.
    user time for condition variable is the least, but the system time 
    of it is the longest. The program don't do much, it's only checking
    the condition variable, while the system is doing works like keep tracking
    on the variable.


PROBLEM 2: Mutex Dangers
========================

  A multi-threaded program has a number of worker threads which each
  need to modify global data structures.  They are as follows:
  - A workers must modify global data X and Y
  - B workers must modify global data Y and Z


A
~

  In one protocol design, there are two mutexes
  - M1 is associated with accessing data X and Y
  - M2 is associated with accessing data Y and Z
  That means that
  - A workers would acquire M1 when modifying X and Y and release when
    finished
  - B workers would acquire M2 when modify Y and Z and release when
    finished

  Describe a major flaw in this protocol.


YOUR ANSWERS HERE:
------------------

    Since Y will not be release from B until it is done with Y and Z, so both 
    A and B might work on Y at the same time. This will cause the lose in work 
    done by B.

B
~

  In another protocol design, there are three mutexes
  - MX is associated with accessing data X
  - MY is associated with accessing data Y
  - MZ is associated with accessing data Z

  The workers do the following
  - A workers acquire MX then MY then modify global data X and Y then
    release both mutexes
  - B workers acquire MY then MZ then modify global data Y and Z then
    release both mutexes

  Identify any problems you see this protocol such as deadlock or
  starvation.  Describe a major flaw in this protocol.


YOUR ANSWERS HERE:
------------------

    a starvation may occur. worker A will get X first, B will
    get Y first, if A is slow enough, then B will keep getting Y and A will 
    never get a chance to get it.

C
~

  A third protocol focuses on the A workers which modify global data X
  and Y.  The intended changes for X and Y are independent so a
  potentially more efficient protocol is the following.

  "A" workers
  1. Atomically check MX and lock it if possible
     - If MX is acquired, modify X
     - Acquire MY, modify Y
     - Release both MX and MY
  2. If MX is NOT available immediately
     - Acquire MY, modify Y
     - Acquire MX, modify X
     - Release MX and MY

  This protocol has the potential for deadlock. Explain a sequence of
  events that would lead to deadlock and suggest a change in the
  protocol to fix the problem.


YOUR ANSWERS HERE:
------------------

    A deadlock will happen when all MX is acquired by some workers,
    and all MY is acquired by other workers. Then MX workers waiting for
    MY, and other workers waiting for MX, none of them will get any, and 
    nothing will be released, it's a deadlock.
    A fix cloud be release the mutex after the modify, not waiting until
    everything is one.


